<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:lang="http://www.springframework.org/schema/lang"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
		http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-4.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
		http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang-4.1.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd">
		<!-- 加载jdbc.properties文件的位置 -->
	<context:property-placeholder location="classpath:jdbc.properties"/>
	<!-- 2.配置druid连接池，id是固定值，class是druid连接池类的全路径 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
		<!-- 配置连接数据库的基本信息 -->
		<property name="driverClassName" value="${jd.driver}"></property>
		<property name="url" value="${jd.url}"></property>
		<property name="username" value="${jd.username}"></property>
		<property name="password" value="${jd.password}"></property>
	</bean>
	<!-- 3.整合spring和mybatis框架将SqlSession等对象的创建交给Sping容器
	id值（sqlSessiongFactory）是固定值 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 1.指定mybatis核心配置文件 -->
		<property name="configLocation"
		 value="classpath:mybatis/mybatis-config.xml"></property>
		 <!-- 2.配置连接池（数据源），red指向连接池的bean对象的id值 
		 也就是上面配置的一大串-->
		 <property name="dataSource" ref="dataSource"></property>
		 <!-- 3、扫描所有的 XxxMapper.xml映射文件，读取其中配置的SQL语句 -->
		 <property name="mapperLocations" value="classpath:mybatis/mapper/*.xml"></property>
	</bean>
	<!-- 定义mapper接口扫描器 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 扫描所有的xxMapper接口，将接口实例创建交给spring容器 -->
		<property name="basePackage" value="com.wangshili.dao"/>
	</bean>
	<!-- 6.配置需要扫描的包(service层)：spring自动去扫描 base-package下的类，
		如果扫描到的类上有 @Controller、@Service、@Component等注解，
		将会自动将类注册为bean（即由spring创建实例）
	 -->
	 
<!-- 	<context:component-scan 
		base-package="com.wangshili.service">
	</context:component-scan> -->

</beans>
